name: Integration Tests for Forks

on:
  repository_dispatch:
    types: [trigger-integration-tests]

jobs:
  build:
    name: Integration Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.13
        id: go

      - uses: actions/checkout@v2
        with:
          repository: ${{ github.event.client_payload.user }}/${{ github.event.client_payload.repo }}
          ref: ${{ github.event.client_payload.ref }}

      - name: Build
        run: make build

      - name: Unit Test
        run: make test

      - name: Integration Test
        run: make integration-test
        env:
          ENV_VAR: ${{ secrets.ENV_VAR }}

      - name: Upload Log Files
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: .logs/*.log

      - name: Setup Message (Ubuntu and MacOs)
        id: message_linux
        if: ${{ always() && matrix.os != "windows-latest" }}
        env:
          STATUS: "${{ job.status }}"
        run: |
          if [[ $STATUS == "success" ]]; then
            echo "::set-output name=MESSAGE::üéâ Integration tests ran successfully on ${{ matrix.os }} ü•≥"
          else
            echo "::set-output name=MESSAGE::‚ùå Integration tests failed on ${{ matrix.os }}"
          fi

      - name: Setup Message (Windows)
        id: message_windows
        if: ${{ always() && matrix.os == "windows-latest" }}
        env:
          STATUS: "${{ job.status }}"
        run: |
          if($env:MESSAGE.equals("success")){
              echo "::set-output name=MESSAGE::üéâ Integration tests ran successfully on ${{ matrix.os }} ü•≥"
          }
          else{
             echo "::set-output name=MESSAGE::‚ùå Integration tests failed on ${{ matrix.os }}"
          }

      - name: Post Comment
        if: ${{ always() }}
        uses: didiladi/comment-on-pr-action@main
        with:
          pr-id: ${{ github.event.client_payload.pr_number }}
          comment-prefix: ${{ github.event.client_payload.comment_prefix }}
          message: ${{ steps.message_linux.outputs.MESSAGE }}${{ steps.message_windows.outputs.MESSAGE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          user: didiladi
          repo: ${{ github.event.client_payload.repo }}
